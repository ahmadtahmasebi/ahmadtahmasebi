from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import QMainWindow, QApplication, QLabel, QLineEdit, QPushButton, QVBoxLayout, QHBoxLayout, QWidget, QFileDialog, QTableWidget, QTableWidgetItem, QDialog, QGridLayout, QComboBox, QFormLayout, QGroupBox, QScrollArea, QMenuBar, QAction, QDialogButtonBox, QMessageBox, QTabWidget
import sqlite3
import sys
import os
import datetime
import time
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# برای رسم نمودار
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np

# برای تولید و مدیریت بارکد
import barcode
from barcode.writer import ImageWriter
from barcode import generate
import io
from PIL import Image, ImageQt
import json

# کلاس نمودار برای استفاده در داشبورد
class MplCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        self.fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = self.fig.add_subplot(111)
        super(MplCanvas, self).__init__(self.fig)
        self.fig.tight_layout()

class ProductManager(QMainWindow):
    def __init__(self, auth_manager=None):
        super().__init__()

        try:
            # ذخیره مدیر احراز هویت
            self.auth_manager = auth_manager
            self.current_user = auth_manager.get_current_user() if auth_manager else None
            
            # اطمینان از وجود پوشه product_images
            if not os.path.exists('product_images'):
                os.makedirs('product_images')
                print("Created product_images directory")

            # اطمینان از وجود پوشه settings
            if not os.path.exists('settings'):
                os.makedirs('settings')
                print("Created settings directory")

            # تنظیمات پیش‌فرض برنامه
            self.app_version = "1.0.0"
            self.app_settings = {
                "theme": "light",  # گزینه‌های: light, dark, blue
                "language": "fa",  # گزینه‌های: fa, en
                "font_family": "Vazir",  # فونت پیش‌فرض
                "font_size": 12,  # سایز فونت پیش‌فرض
                "ui_scale": "desktop"  # گزینه‌های: desktop, mobile
            }

            # بارگذاری تنظیمات از فایل
            self.load_settings()

            # ابتدا اتصال به پایگاه داده را برقرار می‌کنیم
            self.conn = sqlite3.connect('products.db')
            self.cursor = self.conn.cursor()

            # ابتدا جداول پایگاه داده را ایجاد می‌کنیم
            self.initDB_tables()

            # تنظیم استایل برنامه
            self.set_application_style()

            # سپس رابط کاربری را ایجاد می‌کنیم
            self.initUI()

            # محصولات در initUI بارگذاری می‌شوند پس از اینکه کنترل‌ها ایجاد شده‌اند

            # ثبت فعالیت باز کردن بخش مدیریت محصولات
            self.log_activity("application", "باز کردن بخش مدیریت محصولات")

            print("Initialization completed successfully")
        except Exception as e:
            print(f"Error in initialization: {e}")
            QMessageBox.critical(self, "Initialization Error", f"Error initializing application: {str(e)}")
            
    def log_activity(self, activity_type, description):
        """ثبت فعالیت کاربر در سیستم"""
        if self.auth_manager and self.current_user:
            try:
                self.auth_manager.log_user_activity(activity_type, description)
            except Exception as e:
                print(f"Error logging activity: {e}")